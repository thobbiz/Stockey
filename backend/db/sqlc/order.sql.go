// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: order.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  customer_id,
  total_amount,
  comment
) VALUES (
  $1, $2, $3
)
RETURNING id, customer_id, total_amount, order_status, payment_method, comment, created_at
`

type CreateOrderParams struct {
	CustomerID  sql.NullInt64  `json:"customer_id"`
	TotalAmount int64          `json:"total_amount"`
	Comment     sql.NullString `json:"comment"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.CustomerID, arg.TotalAmount, arg.Comment)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.TotalAmount,
		&i.OrderStatus,
		&i.PaymentMethod,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, customer_id, total_amount, order_status, payment_method, comment, created_at FROM orders
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.TotalAmount,
		&i.OrderStatus,
		&i.PaymentMethod,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, customer_id, total_amount, order_status, payment_method, comment, created_at FROM orders
ORDER BY id LIMIT $1 OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.TotalAmount,
			&i.OrderStatus,
			&i.PaymentMethod,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders 
SET order_status = $1
WHERE id = $2
RETURNING id, customer_id, total_amount, order_status, payment_method, comment, created_at
`

type UpdateOrderStatusParams struct {
	OrderStatus OrderStatus `json:"order_status"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.OrderStatus, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.TotalAmount,
		&i.OrderStatus,
		&i.PaymentMethod,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const updatePaymentMethod = `-- name: UpdatePaymentMethod :one
UPDATE orders 
SET payment_method = $1
WHERE id = $2
RETURNING id, customer_id, total_amount, order_status, payment_method, comment, created_at
`

type UpdatePaymentMethodParams struct {
	PaymentMethod PaymentMethod `json:"payment_method"`
	ID            int64         `json:"id"`
}

func (q *Queries) UpdatePaymentMethod(ctx context.Context, arg UpdatePaymentMethodParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentMethod, arg.PaymentMethod, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.TotalAmount,
		&i.OrderStatus,
		&i.PaymentMethod,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}
