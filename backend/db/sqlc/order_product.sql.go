// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: order_product.sql

package db

import (
	"context"
)

const createOrderProduct = `-- name: CreateOrderProduct :one
INSERT INTO order_products (
  order_id,
  product_id,
  price,
  quantity
) VALUES (
  $1, $2, $3, $4
)
RETURNING order_id, product_id, price, quantity
`

type CreateOrderProductParams struct {
	OrderID   int64 `json:"order_id"`
	ProductID int64 `json:"product_id"`
	Price     int64 `json:"price"`
	Quantity  int64 `json:"quantity"`
}

func (q *Queries) CreateOrderProduct(ctx context.Context, arg CreateOrderProductParams) (OrderProduct, error) {
	row := q.db.QueryRowContext(ctx, createOrderProduct,
		arg.OrderID,
		arg.ProductID,
		arg.Price,
		arg.Quantity,
	)
	var i OrderProduct
	err := row.Scan(
		&i.OrderID,
		&i.ProductID,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const getOrderProduct = `-- name: GetOrderProduct :one
SELECT order_id, product_id, price, quantity FROM order_products
WHERE order_id = $1 AND product_id = $2 LIMIT 1
`

type GetOrderProductParams struct {
	OrderID   int64 `json:"order_id"`
	ProductID int64 `json:"product_id"`
}

func (q *Queries) GetOrderProduct(ctx context.Context, arg GetOrderProductParams) (OrderProduct, error) {
	row := q.db.QueryRowContext(ctx, getOrderProduct, arg.OrderID, arg.ProductID)
	var i OrderProduct
	err := row.Scan(
		&i.OrderID,
		&i.ProductID,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const getOrderProducts = `-- name: GetOrderProducts :one
SELECT order_id, product_id, price, quantity FROM order_products
WHERE order_id = $1
`

func (q *Queries) GetOrderProducts(ctx context.Context, orderID int64) (OrderProduct, error) {
	row := q.db.QueryRowContext(ctx, getOrderProducts, orderID)
	var i OrderProduct
	err := row.Scan(
		&i.OrderID,
		&i.ProductID,
		&i.Price,
		&i.Quantity,
	)
	return i, err
}

const listOrderProducts = `-- name: ListOrderProducts :many
SELECT order_id, product_id, price, quantity FROM order_products
ORDER BY order_id, product_id LIMIT $1 OFFSET $2
`

type ListOrderProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrderProducts(ctx context.Context, arg ListOrderProductsParams) ([]OrderProduct, error) {
	rows, err := q.db.QueryContext(ctx, listOrderProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderProduct{}
	for rows.Next() {
		var i OrderProduct
		if err := rows.Scan(
			&i.OrderID,
			&i.ProductID,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
