// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const addQuantity = `-- name: AddQuantity :one
UPDATE products SET quantity = quantity + $1 WHERE id = $2 RETURNING id, owner, name, cost_price, selling_price, quantity, unit, description, created_at
`

type AddQuantityParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddQuantity(ctx context.Context, arg AddQuantityParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, addQuantity, arg.Amount, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.CostPrice,
		&i.SellingPrice,
		&i.Quantity,
		&i.Unit,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  owner,
  name,
  cost_price,
  selling_price,
  quantity,
  unit,
  description
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, owner, name, cost_price, selling_price, quantity, unit, description, created_at
`

type CreateProductParams struct {
	Owner        string         `json:"owner"`
	Name         string         `json:"name"`
	CostPrice    int64          `json:"cost_price"`
	SellingPrice int64          `json:"selling_price"`
	Quantity     int64          `json:"quantity"`
	Unit         string         `json:"unit"`
	Description  sql.NullString `json:"description"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Owner,
		arg.Name,
		arg.CostPrice,
		arg.SellingPrice,
		arg.Quantity,
		arg.Unit,
		arg.Description,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.CostPrice,
		&i.SellingPrice,
		&i.Quantity,
		&i.Unit,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, owner, name, cost_price, selling_price, quantity, unit, description, created_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.CostPrice,
		&i.SellingPrice,
		&i.Quantity,
		&i.Unit,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getProductForUpdate = `-- name: GetProductForUpdate :one
SELECT id, owner, name, cost_price, selling_price, quantity, unit, description, created_at FROM products
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetProductForUpdate(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductForUpdate, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.CostPrice,
		&i.SellingPrice,
		&i.Quantity,
		&i.Unit,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, owner, name, cost_price, selling_price, quantity, unit, description, created_at FROM products
ORDER BY id LIMIT $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Name,
			&i.CostPrice,
			&i.SellingPrice,
			&i.Quantity,
			&i.Unit,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCostPrice = `-- name: UpdateCostPrice :one
UPDATE products 
SET cost_price = $1
WHERE id = $2
RETURNING id, owner, name, cost_price, selling_price, quantity, unit, description, created_at
`

type UpdateCostPriceParams struct {
	CostPrice int64 `json:"cost_price"`
	ID        int64 `json:"id"`
}

func (q *Queries) UpdateCostPrice(ctx context.Context, arg UpdateCostPriceParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateCostPrice, arg.CostPrice, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.CostPrice,
		&i.SellingPrice,
		&i.Quantity,
		&i.Unit,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updateSellingPrice = `-- name: UpdateSellingPrice :one
UPDATE products 
SET selling_price = $1
WHERE id = $2
RETURNING id, owner, name, cost_price, selling_price, quantity, unit, description, created_at
`

type UpdateSellingPriceParams struct {
	SellingPrice int64 `json:"selling_price"`
	ID           int64 `json:"id"`
}

func (q *Queries) UpdateSellingPrice(ctx context.Context, arg UpdateSellingPriceParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateSellingPrice, arg.SellingPrice, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Name,
		&i.CostPrice,
		&i.SellingPrice,
		&i.Quantity,
		&i.Unit,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
